1- ¿De qué manera ver una diferencia entre dos versiones de un archivo te ayuda a ver el error que se introdujo?
        De una manera muy sencilla y muy fácil.
        En Windows nos situamos en la carpeta que contiene los archivos a comparar (cd ..) y ahí ponemos
        FC nombreArchivo1 nombreArchivo2
        y saldrán las diferencias entre archivos (si no tenemos Git, por supuesto).


2- ¿Cómo podría tener un acceso fácil a todo el historial de un archivo que lo haga un programador más eficiente a largo plazo?

        Con Git.
        
        
3- ¿Cuáles cree que son los pros y los contras de elegir manualmente cuándo crear una confirmación, como lo hace en Git, frente a tener las versiones guardadas automáticamente, como lo hace Google Docs?
    PROS: Te aseguras de tener una versión funcional al guardarlo tú y eliges exactamente cuándo guardarlo.
    CONTRAS: Se te puede olvidar hacer el commit y no guardarlo.


4- ¿Por qué crees que algunos sistemas de control de versiones, como Git, permiten guardar múltiples archivos en una confirmación, mientras que otros, como Google Docs, tratan cada archivo por separado?
        Porque es muy probable que una app web use más de un archivo y estén relacionados, mientras que Google Docs usa archivos de texto en los que no existen dependencias unos de otros.
        
5- ¿Cómo se pueden usar los comandos git log y git diff para ver el historial de archivos? 
    Con git log ves todo el historial de commits, con el Id del commit, el autor, la fecha y el mensaje asociado.
    Con git diff comparas el código que ha variado de un commit al siguiente. Importante poner el Id más antiguo primero y después el más reciente.
    
6- ¿De qué manera el uso del control de versiones te hace más seguro para realizar cambios que podrían romper algo?
    Puedes ver exactamente en qué momento se rompió y cómo.
    
7- Ahora que tiene configurado su espacio de trabajo, ¿qué quiere probar con Git?
    Añadir modificaciones de archivos
        

RECORDATORIO:
    - cd rutaParaIr
    - mkdir nombreCarpeta /// para crear nueva carpeta
    - brackets /// en la ruta que queremos que se abra brackets, por ejemplo 
            C:\Users\Fernando\Desktop\Elvira\version-control\reflections>brackets

Para ver las diferencias entre dos commit:
        git diff Id1 Id2  /// Primero pones el Id del que esté más abajo (en consola) y luego del de arriba.
        Tb puedes poner git diff -u NombreArchivo1 NombreArchivo2
        
Para ver todo lo que ha pasado en el repositorio (commits):
        git log 
        Para detener la salida (git log): presione q. // si no, no puedes escribir
        
Para ver la versión de git instalada:
        git --version
        
Para clonar un repositorio:
        git clone URL
        Si queremos que sólo se copie el contenido (xq ya hemos creado una carpeta con ese nombre) ponemos:
        git clone URL .   /// después de la url, espacio y punto

Para volver a un commit antiguo
        git checkout IdDelCommit

Para mover un archivo en git
        mv ruta/NombreArchivo nombreAGuardarComo

Si quisieras que se configure un editor de texto específico (x ejemplo Sublime)
    git config --global core.editor "'C: / Archivos de programa / Sublime Text 2 / sublime_text.exe' -n -w"

Para obtener salida coloreada:
        git config --global color.ui auto
        
Es posible copiar un directorio de una computadora a otra usando el comando scp, que significa "copia segura".

Para ver todos los archivos de una carpeta, en git ponemos:
    ls
    Si además queremos ver los archivos ocultos ponemos: 
        ls -a
Para crear un nuevo repositorio, en la carpeta donde queremos crearlo:
    git init

Para ver los archivos que han cambiado desde el último commit:
    git status
    
Para añadir archivos:
    git add nombreArchivo   //// Si tienes mil archivos para subir, para hacerlo todo de una vez pones 
                                    git add .
    
Si te equivocas añadiendo un archivo puedes hacer:
    git reset nombreArchivo

Para hacer los commits:
    git commit -m "mensaje de commit"  ////// -m es la flag para message
    Si sólo pones:
        git commit //// Se abre un editor de texto para que escribas el mensaje

Para comparar archivos del staging area y del working directory ponemos sólo:
    git diff
    Si comparamos un archivo del staging area con uno del repositorio:
        git diff --staged

Si quiero descartar cambios del staging area y del working directory ponemos:
    git reset --hard   --> cuidado con este, no podremos resuperar esos cambios
    
Si pones:
    git branch //// te indica en qué rama estás, suele ser la master o *master (el * significa que es la que estás comprobando). También te dice qué ramas hay localmente (en el pc)
    git branch nombreDeLaRama //// crea una rama con ese nombre
    Para cambiar de una rama a otra:
        git checkout nombreDeLaRama
        Ejecutamos git branch //// y el asterisco habrá cambiado a delante de nombreDeLaRama
    Si quieres saber cuántas ramas existen en ese repositorio (aunque no las tengas en tu pc):
        git branch -r   /// -r es la flag de remota

Para ver cómo es gráficamente la rama master y otra ponemos:
    git log --graph --oneline master nombreOtraRama

Si quieres hacer un cambio en un commit y guardarlo como una rama nueva y moverte ya a esa rama:

    git checkout -b nombreDeLaRama
    
Si se elimina una rama y deja algunas asignaciones fuera de las ramas existentes, los commits seguirán siendo accesibles mediante su Id, hasta que se ejecute la recolección de basura de Git, que se hace:
    git gc  ///// garbage collection
    
Para hacer un merge de dos ramas:
    git merge nombreRama1 nombreRama2
        Lo ideal es que estés en la rama que no tiene los cambios últimos para fusionar, q suele ser la master y le mergeas otra rama con una funcionalidad nueva.
    
Para ver la diferencia entre un commit y su padre, sin saber quién era su padre (merge):
    git show IdDelCommit
    
Para borrar la rama (pero manteniendo los commits que se han hecho en ella):
    git branch -d nombreDeLaRama //// d es de delete
    
Si hay problemas para hacer el merge
    git merge --abort

Si no tienes una rama en local, la creas con el mismo nombre en tu pc y luego pones
    git branch -u origin/nombreDeLaRama nombreDeLaRama //// y esto significa que cuando te refieres a esa rama te refieres a la rama esa de remoto
    
Si han hecho muchos cambios en el repo y no los tengo, podría hacer:
    git pull origin nombreDeLaRama
    
Para saber los repositorios que hay en remoto (GitHub) ponemos:
    git remote  /// hasta que no ejecutemos el paso siguiente no devolverá nada
    
Para añadir un repositorio a GIT ponemos:
    git remote add origin URLdelRepositorio
    
Para comprobar que la URL se ha puesto bien ponemos:
    git remote -v   /// -v es de verboose
    
Para enviar los cambios al remoto:
    git push repoDondeQuieroMandarLosCambios nombreDeLaRama //// ejemplo git push origin master   o   git push origin nombreDeLaRama
    
Para traer los cambios del remoto
    git pull repoDeDondeQuieroTraerLosCambios nombreDeLaRama //// ejemplo git pull origin master
    
Podemos crear un archivo directamente en GitHub estando en el propio repositorio y clickando en "Create new file"

Fork sólo existe en GitHub, es como clonar un repo de alguien en tu cuenta directamente. Si quieres que alguien más pueda editar el código, en Settings >> Collaborators >> Add collaborator

Si has hecho cambios en local y cambios en GitHub, puede haber conflicto. Para ello hacemos:
    git fetch /// y se crea como una rama de lo que está en remoto y con git log y git diff podemos ver exactamente qué se ha cambiado para que no haya cagadas. Si estás de acuerdo con los cambios, harás git merge master origin/master y ya luego git add y git commit y git push
    Para comprobar, despues de
        git fetch //// git status
        
En GitHub puedes clickar en "New pull request" para indicar a los colaboradores que te gustaría hacer un merge. Ellos lo ven y pueden comentarlo por si hay posibles errores o no quieren que pase y si todo va bien se clicka en "Merge pull request"
        